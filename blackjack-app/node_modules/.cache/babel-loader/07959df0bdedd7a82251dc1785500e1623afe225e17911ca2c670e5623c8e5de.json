{"ast":null,"code":"import io from 'socket.io-client';\nlet info = {};\nconst backendUrl = `https://rngbj.kasoom.com/`;\nconst socket = io(backendUrl, {\n  withCredentials: true,\n  transports: ['websocket']\n});\nsocket.on('disconnect', reason => {\n  console.log(\"Disconnected: \", reason);\n  if (reason === \"io server disconnect\") {\n    tryReconnect(new Date());\n  } else if (reason === \"transport close\" || reason === \"ping timeout\") {\n    tryReconnect(new Date());\n  } else {\n    console.log(\"Unknown disconnection reason:\", reason);\n  }\n});\nsocket.on('newState', data => {\n  console.log(\"NewState Called...\");\n  data.newStatus = true;\n  data.type = 'newState';\n  console.log(data);\n  window.postMessage(data, \"*\");\n});\nsocket.on('newClientStatus', data => {\n  console.log('newClientStatus', data);\n  data.newStatus = true;\n  data.newPrivatestat = true;\n  window.postMessage(data, \"*\");\n});\nsocket.on('NewBalance', () => {\n  console.log('New balance function called!');\n});\nsocket.on(\"showMess\", data => {\n  console.log(\"Posting message: \", data);\n  data.type = \"showMess\";\n  window.postMessage(data, '*');\n});\nsocket.on('message', message => {\n  console.log('Received message:', message);\n  if (typeof message === 'string') {\n    const data = JSON.parse(message);\n    if (data.action === 'init_response') {\n      setUser(data.info.userId);\n      setPlayer(data.info.sessionId);\n    }\n  }\n});\nsocket.on('connect_error', error => {\n  console.log(\"Connection error:\", error.message);\n});\nsocket.on('error', error => {\n  console.error('WebSocket Error:', error);\n});\nsocket.on('reconnect_error', error => {\n  console.log(\"Reconnection error:\", error.message);\n});\nfunction tryReconnect(disconnectTime) {\n  console.log(\"Trying to reconnect... \", socket.connected);\n  if (!socket.connected) {\n    socket.connect();\n    setTimeout(() => {\n      tryReconnect();\n    }, 4000);\n  } else {\n    console.log(\"Connection reestablished!\");\n    setPlayer(info.tableID, info.playerID);\n  }\n}\nfunction setPlayer(table) {\n  console.log('Setting player with table: ', table);\n  let mess = {\n    type: 'delaerAction',\n    command: 'setTable',\n    tableId: table\n  };\n  window.postMessage(mess, '*');\n  info.tableID = table;\n  socket.emit('setPlayer', mess, response => {\n    console.log('Response: ', response);\n    if (response && response.error) {\n      console.log('Emit error: ', response.error);\n    } else {\n      console.log('Emit successful: ', response);\n    }\n  });\n}\nfunction setUser(player) {\n  info.playerID = player;\n}\nasync function activateGame(token, operator = '') {\n  const url = `${backendUrl}api/init`;\n  console.log(\"Posting token: \", url, token);\n  let res = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      token: token,\n      operator: operator\n    }),\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n      'access-control-allow-credentials': true,\n      'withCredentials': true\n    }\n  });\n  let finalRes = await res.json();\n  console.log(\"Activation response: \", finalRes);\n  return finalRes;\n}\nconst fetchRequest = async (command, method, body) => {\n  try {\n    const res = await fetch(`${backendUrl}api/${command}`, {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n        'access-control-allow-credentials': true,\n        'withCredentials': true\n      },\n      credentials: 'include',\n      body: JSON.stringify(body)\n    });\n    return await res.json();\n  } catch (err) {\n    console.log('Error fetching: ', err);\n    return {\n      status: 'azErr',\n      errCode: 'fetchErr'\n    };\n  }\n};\nconst call = async (command, method, body) => {\n  const res = await fetchRequest(command, method, body);\n  if (res.status === 'azErr') {\n    const errCode = res.errCode;\n    if (errCode == 'noSession') {\n      const initRes = await init();\n      if (initRes.status === 'OK') {\n        return await call(command, method, body);\n      }\n    }\n    console.log('Fetch error: ', res);\n  }\n  return res;\n};\nasync function init(token) {\n  const res = await fetchRequest(`init?token=${token}`, 'GET');\n  console.log('Init response: ', res);\n  return res;\n}\nconst HitApi = async (playerId, tableId) => call(`hit/${playerId}/${tableId}`, 'GET');\n_c = HitApi;\nconst splitApi = (playerId, tableId) => call(`split/${playerId}/${tableId}`, 'GET');\nconst DoubleApi = (playerId, tableId) => call(`double/${playerId}/${tableId}`, 'GET');\n_c2 = DoubleApi;\nconst stateHandApi = (playerId, tableId) => call(`stateHand/${playerId}/${tableId}`, 'GET');\nconst BetApi = (playerId, tableId, newbetAmount, handId) => call(`bet/${playerId}/${tableId}/${handId}/${newbetAmount}`, 'GET');\n_c3 = BetApi;\nconst sideBetApi = (playerId, tableId, newbetAmount, handId, betType) => call(`sideBet/${playerId}/${tableId}/${handId}/${newbetAmount}/${betType}`, 'GET');\nconst StandApi = (playerId, tableId) => call(`stand/${playerId}/${tableId}`, 'GET');\n_c4 = StandApi;\nconst next = (playerId, tableId) => call(`next/${playerId}/${tableId}`, 'GET');\nconst confirmBets = (playerId, tableId) => call(`confirmBets/${playerId}/${tableId}`, 'GET');\nconst isSplitApi = (playerId, tableId) => call(`isSplit/${playerId}/${tableId}`, 'GET');\nconst TotalApi = (playerId, tableId) => call(`total/${playerId}/${tableId}`, 'GET');\n_c5 = TotalApi;\nconst insuranceApi = (playerId, tableId, handNo) => call(`insurance/${tableId}/${playerId}/${handNo}`, 'GET');\nexport { setUser, HitApi, splitApi, stateHandApi, BetApi, StandApi, DoubleApi, isSplitApi, init, TotalApi, insuranceApi, next, confirmBets, setPlayer, sideBetApi, activateGame };\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"HitApi\");\n$RefreshReg$(_c2, \"DoubleApi\");\n$RefreshReg$(_c3, \"BetApi\");\n$RefreshReg$(_c4, \"StandApi\");\n$RefreshReg$(_c5, \"TotalApi\");","map":{"version":3,"names":["io","info","backendUrl","socket","withCredentials","transports","on","reason","console","log","tryReconnect","Date","data","newStatus","type","window","postMessage","newPrivatestat","message","JSON","parse","action","setUser","userId","setPlayer","sessionId","error","disconnectTime","connected","connect","setTimeout","tableID","playerID","table","mess","command","tableId","emit","response","player","activateGame","token","operator","url","res","fetch","method","body","stringify","credentials","headers","finalRes","json","fetchRequest","err","status","errCode","call","initRes","init","HitApi","playerId","_c","splitApi","DoubleApi","_c2","stateHandApi","BetApi","newbetAmount","handId","_c3","sideBetApi","betType","StandApi","_c4","next","confirmBets","isSplitApi","TotalApi","_c5","insuranceApi","handNo","$RefreshReg$"],"sources":["C:/Users/Jonathan/Documents/GitHub/BlackJackDev/blackjack-app/src/playerClient.js"],"sourcesContent":["import io from 'socket.io-client';\n\nlet info = {};\nconst backendUrl = `https://rngbj.kasoom.com/`;\n\nconst socket = io(backendUrl, {\n    withCredentials: true,\n    transports: ['websocket']\n});\n\nsocket.on('disconnect', (reason) => {\n    console.log(\"Disconnected: \", reason);\n    if (reason === \"io server disconnect\") {\n        tryReconnect(new Date());\n    } else if (reason === \"transport close\" || reason === \"ping timeout\") {\n        tryReconnect(new Date());\n    } else {\n        console.log(\"Unknown disconnection reason:\", reason);\n    }\n});\n\nsocket.on('newState', data => {\n    console.log(\"NewState Called...\");\n    data.newStatus = true;\n    data.type = 'newState';\n    console.log(data);\n    window.postMessage(data, \"*\");\n});\n\nsocket.on('newClientStatus', data => {\n    console.log('newClientStatus', data);\n    data.newStatus = true;\n    data.newPrivatestat = true;\n    window.postMessage(data, \"*\");\n});\n\nsocket.on('NewBalance', () => {\n    console.log('New balance function called!');\n});\n\nsocket.on(\"showMess\", data => {\n    console.log(\"Posting message: \", data);\n    data.type = \"showMess\";\n    window.postMessage(data, '*');\n});\n\nsocket.on('message', (message) => {\n    console.log('Received message:', message);\n    if (typeof message === 'string') {\n        const data = JSON.parse(message);\n        if (data.action === 'init_response') {\n            setUser(data.info.userId);\n            setPlayer(data.info.sessionId);\n        }\n    }\n});\n\nsocket.on('connect_error', (error) => {\n    console.log(\"Connection error:\", error.message);\n});\n\nsocket.on('error', (error) => {\n    console.error('WebSocket Error:', error);\n});\n\nsocket.on('reconnect_error', (error) => {\n    console.log(\"Reconnection error:\", error.message);\n});\n\nfunction tryReconnect(disconnectTime) {\n    console.log(\"Trying to reconnect... \", socket.connected);\n    if (!socket.connected) {\n        socket.connect();\n        setTimeout(() => {\n            tryReconnect();\n        }, 4000);\n    } else {\n        console.log(\"Connection reestablished!\");\n        setPlayer(info.tableID, info.playerID);\n    }\n}\n\nfunction setPlayer(table) {\n    console.log('Setting player with table: ', table);\n    let mess = {\n        type: 'delaerAction',\n        command: 'setTable',\n        tableId: table,\n    };\n    window.postMessage(mess, '*');\n    info.tableID = table;\n    socket.emit('setPlayer', mess, (response) => {\n        console.log('Response: ', response);\n        if (response && response.error) {\n            console.log('Emit error: ', response.error);\n        } else {\n            console.log('Emit successful: ', response);\n        }\n    });\n}\n\nfunction setUser(player) {\n    info.playerID = player;\n}\n\nasync function activateGame(token, operator = '') {\n    const url = `${backendUrl}api/init`;\n    console.log(\"Posting token: \", url, token);\n\n    let res = await fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify({\n            token: token,\n            operator: operator,\n        }),\n        credentials: 'include',\n        headers: {\n            'Content-type': 'application/json; charset=UTF-8',\n            'access-control-allow-credentials': true,\n            'withCredentials': true\n        }\n    });\n\n    let finalRes = await res.json();\n    console.log(\"Activation response: \", finalRes);\n    return finalRes;\n}\n\nconst fetchRequest = async (command, method, body) => {\n    try {\n        const res = await fetch(`${backendUrl}api/${command}`, {\n            method: method,\n            headers: {\n                'Content-Type': 'application/json; charset=UTF-8',\n                'access-control-allow-credentials': true,\n                'withCredentials': true\n            },\n            credentials: 'include',\n            body: JSON.stringify(body)\n        });\n        return await res.json();\n    } catch (err) {\n        console.log('Error fetching: ', err);\n        return {\n            status: 'azErr',\n            errCode: 'fetchErr'\n        };\n    }\n};\n\nconst call = async (command, method, body) => {\n    const res = await fetchRequest(command, method, body);\n    if (res.status === 'azErr') {\n        const errCode = res.errCode;\n        if (errCode == 'noSession') {\n            const initRes = await init();\n            if (initRes.status === 'OK') {\n                return await call(command, method, body);\n            }\n        }\n        console.log('Fetch error: ', res);\n    }\n    return res;\n};\n\nasync function init(token) {\n    const res = await fetchRequest(`init?token=${token}`, 'GET');\n    console.log('Init response: ', res);\n    return res;\n}\n\nconst HitApi = async (playerId, tableId) => call(`hit/${playerId}/${tableId}`, 'GET');\nconst splitApi = (playerId, tableId) => call(`split/${playerId}/${tableId}`, 'GET');\nconst DoubleApi = (playerId, tableId) => call(`double/${playerId}/${tableId}`, 'GET');\nconst stateHandApi = (playerId, tableId) => call(`stateHand/${playerId}/${tableId}`, 'GET');\nconst BetApi = (playerId, tableId, newbetAmount, handId) => call(`bet/${playerId}/${tableId}/${handId}/${newbetAmount}`, 'GET');\nconst sideBetApi = (playerId, tableId, newbetAmount, handId, betType) => call(`sideBet/${playerId}/${tableId}/${handId}/${newbetAmount}/${betType}`, 'GET');\nconst StandApi = (playerId, tableId) => call(`stand/${playerId}/${tableId}`, 'GET');\nconst next = (playerId, tableId) => call(`next/${playerId}/${tableId}`, 'GET');\nconst confirmBets = (playerId, tableId) => call(`confirmBets/${playerId}/${tableId}`, 'GET');\nconst isSplitApi = (playerId, tableId) => call(`isSplit/${playerId}/${tableId}`, 'GET');\nconst TotalApi = (playerId, tableId) => call(`total/${playerId}/${tableId}`, 'GET');\nconst insuranceApi = (playerId, tableId, handNo) => call(`insurance/${tableId}/${playerId}/${handNo}`, 'GET');\n\nexport {\n    setUser,\n    HitApi,\n    splitApi,\n    stateHandApi,\n    BetApi,\n    StandApi,\n    DoubleApi,\n    isSplitApi,\n    init,\n    TotalApi,\n    insuranceApi,\n    next,\n    confirmBets,\n    setPlayer,\n    sideBetApi,\n    activateGame\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}